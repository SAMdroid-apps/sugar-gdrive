From 64148e21f88493826b49dc44f13164764a797361 Mon Sep 17 00:00:00 2001
From: Ignacio Rodriguez <ignacio@sugarlabs.org>
Date: Thu, 2 Jan 2014 13:10:07 -0200
Subject: [PATCH] Add method for download

---
 extensions/webservice/sugargdrive/__init__.py      |   1 +
 extensions/webservice/sugargdrive/account.py       |  86 +++++++++-----
 .../sugargdrive/sugargdrive/sugargdrive.py         | 125 +++++++++++++--------
 3 files changed, 141 insertions(+), 71 deletions(-)

diff --git a/extensions/webservice/sugargdrive/__init__.py b/extensions/webservice/sugargdrive/__init__.py
index e69de29..40a96af 100644
--- a/extensions/webservice/sugargdrive/__init__.py
+++ b/extensions/webservice/sugargdrive/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/extensions/webservice/sugargdrive/account.py b/extensions/webservice/sugargdrive/account.py
index d4bc6df..3da74e8 100644
--- a/extensions/webservice/sugargdrive/account.py
+++ b/extensions/webservice/sugargdrive/account.py
@@ -14,16 +14,10 @@
 
 import os
 import sys
-import logging
-
-try:
-    import simplejson as json
-except ImportError:
-    import json
+import json
 
 from gettext import gettext as _
 
-from gi.repository import GConf
 from gi.repository import Gdk
 from gi.repository import GLib
 from gi.repository import GObject
@@ -65,18 +59,21 @@ USER_FILES = os.path.join(env.get_profile_path(), 'gdrive_files.json')
 
 
 class FilesModel(Gtk.ListStore):
-    def __init__(self, account):
-        Gtk.ListStore.__init__(self, str, bool, str, object, str, str, str, 
+    def __init__(self, account, listview, button):
+        Gtk.ListStore.__init__(self, str, bool, str, object, str, str, str,
             int, object, object, object, bool, str, str)
 
         self._account = account
+        self._listview = listview
+        self._button = button
 
     def do_drag_data_get(self, path, selection):
         data = self.get_iter(path)
         title = self.get_value(data, 4)
         link = self.get_value(data, 12)
         mime_type = self.get_value(data, 13)
-        self._account.Download(link, title, mime_type)
+        self._account.DownloadFiles(link, title, mime_type,
+            self._listview, self._button)
 
 
 class ExtensionPalette(Palette):
@@ -119,6 +116,9 @@ class Account(account.Account):
         self._model = None
         self._alert = None
         self._listview = None
+        self._volume_button = None
+        self._cid = None
+        self._ccid = None
 
     def get_description(self):
         return ACCOUNT_DESCRIPTION
@@ -129,12 +129,14 @@ class Account(account.Account):
             self._journal = get_journal()
             self._listview = self._journal.get_list_view()
             self._volumes_toolbar = self._journal.get_volumes_toolbar()
-            volume_button = ExtensionButton(ACCOUNT_ICON, ICONS_PATH)
-            volume_button.connect('toggled', self._journal_toggled)
-            volume_button.connect('load-files', self._load_files)
-            volume_button.connect('data-upload', self._upload_file)
-            self._volumes_toolbar.add_extension_button(volume_button,
+
+            self._volume_button = ExtensionButton(ACCOUNT_ICON, ICONS_PATH)
+            self._volume_button.connect('toggled', self._journal_toggled)
+            self._volume_button.connect('load-files', self._load_files)
+            self._volume_button.connect('data-upload', self._upload_file)
+            self._volumes_toolbar.add_extension_button(self._volume_button,
                 ACCOUNT_NAME, palette)
+
             palette.set_item_cb(self.update_files)
 
     def get_token_state(self):
@@ -146,19 +148,27 @@ class Account(account.Account):
 
         return self._shared_journal_entry
 
-
     def _journal_toggled(self, widget):
         self._journal.get_window().set_cursor(None)
         option = widget.props.active
         if option:
+            self._cid = self._listview.tree_view.connect('drag-begin',
+                self.turn_off_buttons)
+            self._ccid = self._listview.tree_view.connect('drag-end',
+                self.turn_on_buttons)
             option = False
         else:
+            if self._cid and self._ccid:
+                self._listview.tree_view.disconnect(self._cid)
+                self._listview.tree_view.disconnect(self._ccid)
+                self._cid = None
+                self._ccid = None
             option = True
         self._listview.use_options(option)
 
-    def _load_files(self, widget):
+    def _load_files(self, *kwargs):
         if not self._model:
-            self._model = FilesModel(self.upload)
+            self._model = FilesModel(self.upload, self._listview, self)
         self._model.clear()
         self._listview.tree_view.set_model(self._model)
 
@@ -174,12 +184,19 @@ class Account(account.Account):
                     self._journal.get_window().set_cursor(None)
                     f.close()
                     return
-                
-                for userfile in data['items']:
+
+                isdict = False
+                if isinstance(data, dict):
+                    isdict = True
+
+                if isdict:
+                    data = data['items']
+
+                for userfile in data:
                     txt = '<span weight="bold">%s</span>' % (
                         GLib.markup_escape_text(userfile['title']))
                     icon_name = _get_icon_for_mime(userfile['mimeType'])
-                    link = userfile['selfLink']
+                    link = userfile['alternateLink']
                     itter = self._model.insert(-1, ['', False, icon_name,
                         profile.get_color(), txt, '', '', 50,
                         profile.get_color(), profile.get_color(),
@@ -195,7 +212,7 @@ class Account(account.Account):
                 self._listview._clear_message()
 
             self._journal.get_window().set_cursor(None)
-    
+
         self._listview._show_message(_('Loading files...'),
                 icon_name=ACCOUNT_ICON)
         cursor = Gdk.Cursor.new(Gdk.CursorType.WATCH)
@@ -207,7 +224,6 @@ class Account(account.Account):
         account.connect('transfer-state-changed', self._display_alert_cb)
         account.upload_file(None, metadata)
 
-
     def _display_alert_cb(self, widget, title, message):
         if self._alert is None:
             self._alert = NotifyAlert()
@@ -226,15 +242,35 @@ class Account(account.Account):
         self._listview._show_message(_('Updating file list...'),
                 icon_name=ACCOUNT_ICON)
         cursor = Gdk.Cursor.new(Gdk.CursorType.WATCH)
+        self._journal.get_window().set_cursor(cursor)
 
         def internal_callback():
             inst = self.upload.Upload()
-            inst.update_files(self._display_alert_cb, TOKEN_KEY, 
+            inst.update_files(self._display_alert_cb, TOKEN_KEY,
                 self._load_files)
             self._listview._clear_message()
+            self._journal.get_window().set_cursor(None)
 
         GObject.idle_add(internal_callback)
 
+    def turn_off_buttons(self, *kwargs):
+        buttons = self._volumes_toolbar._volume_buttons
+        current = 0
+        for button in buttons:
+            if not current:
+                continue
+            button.set_sensitive(False)
+            current += 1
+
+    def turn_on_buttons(self, *kwargs):
+        buttons = self._volumes_toolbar._volume_buttons
+        current = 0
+        for button in buttons:
+            if not current:
+                continue
+            button.set_sensitive(True)
+            current += 1
+
 
 class _SharedJournalEntry(SharedJournalEntry):
     __gsignals__ = {
@@ -330,4 +366,4 @@ class _ShareMenu(MenuItem):
 
 
 def get_account():
-    return Account()
\ No newline at end of file
+    return Account()
diff --git a/extensions/webservice/sugargdrive/sugargdrive/sugargdrive.py b/extensions/webservice/sugargdrive/sugargdrive/sugargdrive.py
index d321530..d301de1 100644
--- a/extensions/webservice/sugargdrive/sugargdrive/sugargdrive.py
+++ b/extensions/webservice/sugargdrive/sugargdrive/sugargdrive.py
@@ -17,11 +17,7 @@
 import logging
 import os
 import sys
-
-try:
-    import simplejson as json
-except ImportError:
-    import json
+import json
 
 import subprocess
 from gettext import gettext as _
@@ -64,6 +60,28 @@ OAUTH_SCOPE = 'https://www.googleapis.com/auth/drive'
 REDIRECT_URI = "https://www.sugarlabs.org"
 ACCOUNT_NAME = _('Sugar Google Drive')
 
+DS_DBUS_SERVICE = 'org.laptop.sugar.DataStore'
+DS_DBUS_INTERFACE = 'org.laptop.sugar.DataStore'
+DS_DBUS_PATH = '/org/laptop/sugar/DataStore'
+
+_active_downloads = []
+_dest_to_window = {}
+
+PROGRESS_TIMEOUT = 3000
+SPACE_THRESHOLD = 52428800  # 50 Mb
+
+
+def format_float(f):
+    return "%0.2f" % f
+
+
+def remove_all_downloads():
+    for download in _active_downloads:
+        download.cancel()
+        if download.dl_jobject is not None:
+            datastore.delete(download.dl_jobject.object_id)
+        download.cleanup()
+
 
 # Copied from grestful code
 def asynchronous(method):
@@ -73,6 +91,45 @@ def asynchronous(method):
     return _async
 
 
+class DownloadFiles(WebKit.WebView):
+    def __init__(self, uri, title, mime, listview, button):
+        WebKit.WebView.__init__(self)
+        self._link = uri
+        self._title = title
+        self._mime = mime
+        self._listview = listview
+        self._button = button
+
+        self.scroll = Gtk.ScrolledWindow()
+        self.scroll.set_policy(Gtk.PolicyType.AUTOMATIC,
+            Gtk.PolicyType.AUTOMATIC)
+        self.scroll.add(self)
+
+        self._listview._show_widget(self.scroll)
+        self.connect('download-requested', self.__download_requested_cb)
+        self.connect('mime-type-policy-decision-requested',
+                     self.__mime_type_policy_cb)
+        self.load_uri(uri)
+
+    def __download_requested_cb(self, browser, download):
+        Download(download, self._mime)
+
+        def internal_callback():
+            journal_button = self._button._volumes_toolbar._volume_buttons[0]
+            journal_button.set_active(True)
+
+        GObject.idle_add(internal_callback)
+        return True
+
+    def __mime_type_policy_cb(self, webview, frame, request, mimetype,
+                              policy_decision):
+        if 'html'in mimetype:
+            return True
+        else:
+            policy_decision.download()
+            return True
+
+
 class Upload(GObject.GObject):
 
     __gsignals__ = {
@@ -199,7 +256,7 @@ class Upload(GObject.GObject):
                 page_token = files.get('nextPageToken')
                 if not page_token:
                     break
-            except errors.HttpError, error:
+            except Exception, error:
                 display_alert(ACCOUNT_NAME,
                     'An error occurred: %s' % error)
                 break
@@ -207,45 +264,21 @@ class Upload(GObject.GObject):
         f = open(USER_FILES, 'w')
         f.write(json.dumps(files))
         f.close()
-        load_files(None)
-
-DS_DBUS_SERVICE = 'org.laptop.sugar.DataStore'
-DS_DBUS_INTERFACE = 'org.laptop.sugar.DataStore'
-DS_DBUS_PATH = '/org/laptop/sugar/DataStore'
-
-_active_downloads = []
-_dest_to_window = {}
-
-PROGRESS_TIMEOUT = 3000
-SPACE_THRESHOLD = 52428800  # 50 Mb
-
-def format_float(f):
-    return "%0.2f" % f
-
-def remove_all_downloads():
-    for download in _active_downloads:
-        download.cancel()
-        if download.dl_jobject is not None:
-            datastore.delete(download.dl_jobject.object_id)
-        download.cleanup()
+        load_files()
 
 
 class Download(object):
-    def __init__(self, url, filename, mimetype):
-        nr = WebKit.NetworkRequest()
-        nr.set_uri(url)
-        self._download = WebKit.Download(network_request=nr)
-        logging.debug(url)
-
-        self._filename = filename
-        self._mimetype = mimetype
+    def __init__(self, download, mime):
+        self._download = download
         self._journal = journalwindow.get_journal_window()
-        self._source = url
+        self._source = download.get_uri()
 
         self._download.connect('notify::status', self.__state_change_cb)
         self._download.connect('error', self.__error_cb)
 
         self.datastore_deleted_handler = None
+        self._filename = self._download.get_suggested_filename()
+        self._mimetype = mime
 
         self.dl_jobject = None
         self._object_id = None
@@ -261,8 +294,8 @@ class Download(object):
             os.makedirs(self.temp_path)
 
         fd, self._dest_path = tempfile.mkstemp(dir=self.temp_path,
-                                suffix=self._download.get_suggested_filename(),
-                                prefix='tmp')
+                                    suffix=download.get_suggested_filename(),
+                                    prefix='tmp')
         os.close(fd)
 
         # We have to start the download to get 'total-size'
@@ -315,11 +348,11 @@ class Download(object):
                 free_space_mb = (self._free_available_space(
                     path=self.temp_path) - SPACE_THRESHOLD) \
                     / 1024.0 ** 2
-                filename = self._filename
-                self._canceled_alert.props.msg = \
-                    _('Download "%{filename}" requires %{total_size_in_mb}' \
-                      ' MB of free space, only %{free_space_in_mb} MB'      \
-                      ' is available' % \
+                filename = self._download.get_suggested_filename()
+                self._canceled_alert.props.msg = _(
+                    'Download "%{filename}" requires %{total_size_in_mb}'
+                      ' MB of free space, only %{free_space_in_mb} MB'
+                      ' is available' %
                       {'filename': filename,
                        'total_size_in_mb': format_float(total_size_mb),
                        'free_space_in_mb': format_float(free_space_mb)})
@@ -375,8 +408,8 @@ class Download(object):
             sniffed_mime_type = mime.get_for_file(self._dest_path)
             self.dl_jobject.metadata['mime_type'] = sniffed_mime_type
 
-            if sniffed_mime_type in ('image/bmp','image/gif','image/jpeg',
-                                     'image/png','image/tiff'):
+            if sniffed_mime_type in ('image/bmp', 'image/gif', 'image/jpeg',
+                                     'image/png', 'image/tiff'):
                 preview = self._get_preview()
                 if preview is not None:
                     self.dl_jobject.metadata['preview'] = \
@@ -535,7 +568,7 @@ class Download(object):
         return preview_str.getvalue()
 
     def __datastore_deleted_cb(self, uid):
-        logging.debug('Downloaded entry has been deleted' \
+        logging.debug('Downloaded entry has been deleted'
                           ' from the datastore: %r', uid)
         global _active_downloads
         if self in _active_downloads:
-- 
1.8.1.2

